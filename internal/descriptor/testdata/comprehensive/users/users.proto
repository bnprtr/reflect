syntax = "proto3";

package users.v1;

option go_package = "github.com/bnprtr/reflect/internal/descriptor/testdata/comprehensive/users";

import "google/protobuf/timestamp.proto";
import "google/protobuf/field_mask.proto";
import "common/types.proto";

// UserService manages user accounts and profiles.
// This service provides comprehensive user management functionality including
// CRUD operations, authentication, and profile management.
service UserService {
  // CreateUser creates a new user account.
  // This is an idempotent operation - if a user with the same email already exists,
  // it returns the existing user.
  rpc CreateUser(CreateUserRequest) returns (CreateUserResponse) {}

  // GetUser retrieves a user by ID.
  // Returns NOT_FOUND if the user does not exist.
  rpc GetUser(GetUserRequest) returns (GetUserResponse) {}

  // UpdateUser updates an existing user.
  // Uses field mask to specify which fields to update.
  // Returns NOT_FOUND if the user does not exist.
  rpc UpdateUser(UpdateUserRequest) returns (UpdateUserResponse) {}

  // DeleteUser soft-deletes a user account.
  // The user can be restored within 30 days.
  rpc DeleteUser(DeleteUserRequest) returns (DeleteUserResponse) {}

  // ListUsers returns a paginated list of users.
  // Supports filtering and sorting.
  rpc ListUsers(ListUsersRequest) returns (ListUsersResponse) {}

  // SearchUsers performs a full-text search across user profiles.
  rpc SearchUsers(SearchUsersRequest) returns (SearchUsersResponse) {}

  // BatchGetUsers retrieves multiple users by ID in a single request.
  // This is more efficient than making multiple GetUser calls.
  rpc BatchGetUsers(BatchGetUsersRequest) returns (BatchGetUsersResponse) {}

  // StreamUsers streams all users matching the criteria.
  // This is useful for bulk operations or exports.
  rpc StreamUsers(StreamUsersRequest) returns (stream StreamUsersResponse) {}

  // SubscribeToUserUpdates streams real-time updates for specified users.
  // The stream remains open until explicitly closed by the client.
  rpc SubscribeToUserUpdates(SubscribeToUserUpdatesRequest) returns (stream UserUpdateEvent) {}

  // BulkUpdateUsers performs bulk updates on multiple users.
  // This is a client-streaming RPC for efficient batch updates.
  rpc BulkUpdateUsers(stream BulkUpdateUsersRequest) returns (BulkUpdateUsersResponse) {}

  // SyncUsers performs bidirectional synchronization of user data.
  // This is a bidirectional streaming RPC for real-time sync.
  rpc SyncUsers(stream SyncUsersRequest) returns (stream SyncUsersResponse) {}
}

// User represents a user account.
message User {
  // Common metadata.
  common.v1.Metadata metadata = 1;

  // User's email address (unique).
  string email = 2;

  // User's full name.
  string full_name = 3;

  // User's display name (optional).
  string display_name = 4;

  // User's profile information.
  UserProfile profile = 5;

  // User's role.
  UserRole role = 6;

  // User's account status.
  common.v1.Status status = 7;

  // Account verification status.
  VerificationStatus verification_status = 8;

  // User's preferences.
  UserPreferences preferences = 9;

  // Last login timestamp.
  google.protobuf.Timestamp last_login_at = 10;
}

// UserProfile contains detailed profile information.
message UserProfile {
  // Profile photo URL.
  string photo_url = 1;

  // User's bio or description.
  string bio = 2;

  // User's phone number.
  string phone_number = 3;

  // User's birth date (YYYY-MM-DD).
  string birth_date = 4;

  // User's primary address.
  common.v1.Address address = 5;

  // User's website URL.
  string website = 6;

  // Social media links.
  SocialLinks social_links = 7;

  // User's timezone (IANA timezone identifier).
  string timezone = 8;

  // User's preferred language (ISO 639-1).
  string language = 9;
}

// SocialLinks contains links to social media profiles.
message SocialLinks {
  // Twitter/X handle.
  string twitter = 1;

  // LinkedIn profile URL.
  string linkedin = 2;

  // GitHub username.
  string github = 3;

  // Additional social links.
  map<string, string> other = 4;
}

// UserPreferences contains user preferences and settings.
message UserPreferences {
  // Email notification settings.
  NotificationSettings email_notifications = 1;

  // Push notification settings.
  NotificationSettings push_notifications = 2;

  // Theme preference.
  Theme theme = 3;

  // Privacy settings.
  PrivacySettings privacy = 4;
}

// NotificationSettings controls notification preferences.
message NotificationSettings {
  // Whether notifications are enabled.
  bool enabled = 1;

  // Frequency of notification digests.
  DigestFrequency digest_frequency = 2;

  // Specific event types to receive notifications for.
  repeated string event_types = 3;
}

// PrivacySettings controls privacy preferences.
message PrivacySettings {
  // Whether profile is public.
  bool profile_public = 1;

  // Whether email is visible to others.
  bool email_visible = 2;

  // Whether to show online status.
  bool show_online_status = 3;
}

// UserRole defines the role of a user in the system.
enum UserRole {
  // Role is not specified.
  USER_ROLE_UNSPECIFIED = 0;

  // Regular user with standard permissions.
  USER_ROLE_USER = 1;

  // Moderator with elevated permissions.
  USER_ROLE_MODERATOR = 2;

  // Administrator with full permissions.
  USER_ROLE_ADMIN = 3;

  // Super administrator with system-level permissions.
  USER_ROLE_SUPER_ADMIN = 4;
}

// VerificationStatus indicates the verification state of a user account.
enum VerificationStatus {
  // Verification status is not specified.
  VERIFICATION_STATUS_UNSPECIFIED = 0;

  // Account is not verified.
  VERIFICATION_STATUS_UNVERIFIED = 1;

  // Email verification is pending.
  VERIFICATION_STATUS_PENDING = 2;

  // Account is fully verified.
  VERIFICATION_STATUS_VERIFIED = 3;
}

// Theme represents UI theme preferences.
enum Theme {
  // Use system theme.
  THEME_UNSPECIFIED = 0;

  // Light theme.
  THEME_LIGHT = 1;

  // Dark theme.
  THEME_DARK = 2;

  // Auto-switch based on time of day.
  THEME_AUTO = 3;
}

// DigestFrequency controls how often digest notifications are sent.
enum DigestFrequency {
  // No digests.
  DIGEST_FREQUENCY_UNSPECIFIED = 0;

  // Real-time notifications.
  DIGEST_FREQUENCY_REALTIME = 1;

  // Daily digest.
  DIGEST_FREQUENCY_DAILY = 2;

  // Weekly digest.
  DIGEST_FREQUENCY_WEEKLY = 3;
}

// CreateUserRequest creates a new user.
message CreateUserRequest {
  // The user to create.
  User user = 1;

  // Initial password (will be hashed).
  string password = 2;

  // Whether to send a welcome email.
  bool send_welcome_email = 3;
}

// CreateUserResponse returns the created user.
message CreateUserResponse {
  // The created user.
  User user = 1;
}

// GetUserRequest retrieves a user by ID.
message GetUserRequest {
  // The user ID to retrieve.
  string user_id = 1;

  // Fields to include in the response.
  google.protobuf.FieldMask field_mask = 2;
}

// GetUserResponse returns the requested user.
message GetUserResponse {
  // The requested user.
  User user = 1;
}

// UpdateUserRequest updates an existing user.
message UpdateUserRequest {
  // The user to update.
  User user = 1;

  // Fields to update.
  google.protobuf.FieldMask update_mask = 2;
}

// UpdateUserResponse returns the updated user.
message UpdateUserResponse {
  // The updated user.
  User user = 1;
}

// DeleteUserRequest soft-deletes a user.
message DeleteUserRequest {
  // The user ID to delete.
  string user_id = 1;

  // Whether to permanently delete (hard delete).
  bool permanent = 2;
}

// DeleteUserResponse confirms deletion.
message DeleteUserResponse {
  // Deletion timestamp.
  google.protobuf.Timestamp deleted_at = 1;
}

// ListUsersRequest lists users with pagination.
message ListUsersRequest {
  // Pagination parameters.
  common.v1.Pagination pagination = 1;

  // Filter by role.
  UserRole role = 2;

  // Filter by status.
  common.v1.Status status = 3;

  // Sort field (e.g., "created_at", "email").
  string sort_by = 4;

  // Sort order (true = descending).
  bool descending = 5;
}

// ListUsersResponse returns a list of users.
message ListUsersResponse {
  // The list of users.
  repeated User users = 1;

  // Pagination information.
  common.v1.PageInfo page_info = 2;
}

// SearchUsersRequest performs a full-text search.
message SearchUsersRequest {
  // Search query.
  string query = 1;

  // Pagination parameters.
  common.v1.Pagination pagination = 2;
}

// SearchUsersResponse returns search results.
message SearchUsersResponse {
  // Matching users.
  repeated User users = 1;

  // Pagination information.
  common.v1.PageInfo page_info = 2;
}

// BatchGetUsersRequest retrieves multiple users.
message BatchGetUsersRequest {
  // User IDs to retrieve.
  repeated string user_ids = 1;
}

// BatchGetUsersResponse returns multiple users.
message BatchGetUsersResponse {
  // Retrieved users (may be fewer than requested).
  repeated User users = 1;

  // User IDs that were not found.
  repeated string not_found = 2;
}

// StreamUsersRequest streams users matching criteria.
message StreamUsersRequest {
  // Filter by role.
  UserRole role = 1;

  // Filter by status.
  common.v1.Status status = 2;
}

// StreamUsersResponse streams individual users.
message StreamUsersResponse {
  // A single user.
  User user = 1;
}

// SubscribeToUserUpdatesRequest subscribes to user updates.
message SubscribeToUserUpdatesRequest {
  // User IDs to subscribe to.
  repeated string user_ids = 1;

  // Event types to receive.
  repeated UserUpdateEventType event_types = 2;
}

// UserUpdateEvent represents a user update event.
message UserUpdateEvent {
  // Event type.
  UserUpdateEventType event_type = 1;

  // The updated user.
  User user = 2;

  // Timestamp of the update.
  google.protobuf.Timestamp timestamp = 3;
}

// UserUpdateEventType categorizes user update events.
enum UserUpdateEventType {
  // Unspecified event type.
  USER_UPDATE_EVENT_TYPE_UNSPECIFIED = 0;

  // User was created.
  USER_UPDATE_EVENT_TYPE_CREATED = 1;

  // User was updated.
  USER_UPDATE_EVENT_TYPE_UPDATED = 2;

  // User was deleted.
  USER_UPDATE_EVENT_TYPE_DELETED = 3;

  // User logged in.
  USER_UPDATE_EVENT_TYPE_LOGIN = 4;
}

// BulkUpdateUsersRequest updates multiple users.
message BulkUpdateUsersRequest {
  // The user update.
  oneof update {
    // Update a single user.
    UpdateUserRequest user_update = 1;

    // Update multiple users with the same changes.
    BatchUpdateRequest batch_update = 2;
  }
}

// BatchUpdateRequest applies the same update to multiple users.
message BatchUpdateRequest {
  // User IDs to update.
  repeated string user_ids = 1;

  // Fields to update (partial user).
  User user = 2;

  // Fields to update.
  google.protobuf.FieldMask update_mask = 3;
}

// BulkUpdateUsersResponse returns bulk update results.
message BulkUpdateUsersResponse {
  // Number of users updated.
  int32 updated_count = 1;

  // Number of users that failed to update.
  int32 failed_count = 2;

  // Errors encountered during updates.
  repeated common.v1.ErrorInfo errors = 3;
}

// SyncUsersRequest synchronizes user data.
message SyncUsersRequest {
  // Sync operation.
  oneof operation {
    // Upload user changes.
    User user_update = 1;

    // Request current state of a user.
    string user_id = 2;

    // Delete a user.
    string delete_user_id = 3;
  }
}

// SyncUsersResponse returns sync results.
message SyncUsersResponse {
  // Sync result.
  oneof result {
    // Updated user state.
    User user = 1;

    // Confirmation of deletion.
    string deleted_user_id = 2;

    // Error during sync.
    common.v1.ErrorInfo error = 3;
  }
}
